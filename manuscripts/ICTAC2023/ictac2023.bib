@Book{abrial10:_model_event_b,
	author = 	 {J-R. Abrial},
	title = 	 {Modeling in {Event-B}: System and Software Engineering},
	publisher = 	 {Cambridge University Press},
	year = 	 2010
}

@Article{abrial10:_rodin,
	author = 	 {J-R Abrial and M. Butler and S. Hallerstede and T.S. Hoang and F. Mehta and L. Voisin},
	title = 	 {{Rodin}: An Open Toolset for Modelling and Reasoning in {Event-B}},
	journal = 	 {Software Tools for Technology Transfer},
	year = 	 2010,
	volume = 	 12,
	number = 	 6,
	pages = 	 {447--466},
	publisher =    {Springer-Verlag},
}

@InCollection{hoang13:_introd_event_b_model_method,
	author = 	 {T. Hoang},
	title = 	 {An Introduction to the {Event-B} Modelling Method},
	booktitle = 	 {Industrial Deployment of System Engineering Methods},
	publisher = 	 {Springer-Verlag},
	year = 	 2013,
	pages =        {211--236}
}

@misc{scxmlwebsite,
author = {{W3C}},
title = {{SCXML} Specification Website},
month = {September},
year = {2015},
howpublished = {http://www.w3.org/TR/scxml/}
}

@inproceedings{harel1996executable,
  title={Executable object modeling with statecharts},
  author={Harel, David and Gery, Eran},
  booktitle={Proceedings of IEEE 18th International Conference on Software Engineering},
  pages={246--257},
  year={1996},
  organization={IEEE}
}

@article{HAREL1987231,
title = {Statecharts: a visual formalism for complex systems},
journal = {Science of Computer Programming},
volume = {8},
number = {3},
pages = {231-274},
year = {1987},
issn = {0167-6423},
doi = {https://doi.org/10.1016/0167-6423(87)90035-9},
url = {https://www.sciencedirect.com/science/article/pii/0167642387900359},
author = {David Harel},
abstract = {We present a broad extension of the conventional formalism of state machines and state diagrams, that is relevant to the specification and design of complex discrete-event systems, such as multi-computer real-time systems, communication protocols and digital control units. Our diagrams, which we call statecharts, extend conventional state-transition diagrams with essentially three elements, dealing, respectively, with the notions of hierarchy, concurrency and communication. These transform the language of state diagrams into a highly structured and economical description language. Statecharts are thus compact and expressive—small diagrams can express complex behavior—as well as compositional and modular. When coupled with the capabilities of computerized graphics, statecharts enable viewing the description at different levels of detail, and make even very large specifications manageable and comprehensible. In fact, we intend to demonstrate here that statecharts counter many of the objections raised against conventional state diagrams, and thus appear to render specification by diagrams an attractive and plausible approach. Statecharts can be used either as a stand-alone behavioral description or as part of a more general design methodology that deals also with the system's other aspects, such as functional decomposition and data-flow specification. We also discuss some practical experience that was gained over the last three years in applying the statechart formalism to the specification of a particularly complex system.}
}


@article{DBLP:journals/isse/MorrisSHHAB22,
  author       = {Karla Morris and
                  Colin F. Snook and
                  Thai Son Hoang and
                  Geoffrey C. Hulette and
                  Robert C. Armstrong and
                  Michael J. Butler},
  title        = {Formal verification and validation of run-to-completion style state
                  charts using {Event-B}},
  journal      = {Innov. Syst. Softw. Eng.},
  volume       = {18},
  number       = {4},
  pages        = {523--541},
  year         = {2022},
  url          = {https://doi.org/10.1007/s11334-021-00416-4},
  doi          = {10.1007/s11334-021-00416-4},
  timestamp    = {Tue, 06 Dec 2022 13:15:14 +0100},
  biburl       = {https://dblp.org/rec/journals/isse/MorrisSHHAB22.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{Morris2020,
  title={Refinement and Verification of Responsive Control Systems},
  author={Karla Morris and Colin F. Snook and Son Hoang and Geoffrey C. Hulette and Robert C. Armstrong and Michael J. Butler},
  journal={Rigorous State-Based Methods},
  year={2020},
  volume={12071},
  pages={272 - 277}
}

@inproceedings{Morris2018,
  title={Refinement of Statecharts with Run-to-Completion Semantics},
  author={Karla Morris and Colin F. Snook and Son Hoang and Robert C. Armstrong and Michael J. Butler},
  booktitle={International Workshop on Formal Techniques for Safety-Critical Systems},
  year={2018}
}

@inproceedings{DBLP:conf/sefm/HoangSDFB22,
  author       = {Thai Son Hoang and
                  Colin F. Snook and
                  Dana Dghaym and
                  Asieh Salehi Fathabadi and
                  Michael J. Butler},
  editor       = {Paolo Masci and
                  Cinzia Bernardeschi and
                  Pierluigi Graziani and
                  Mario Koddenbrock and
                  Maurizio Palmieri},
  title        = {Building an Extensible Textual Framework for the {Rodin} Platform},
  booktitle    = {Software Engineering and Formal Methods. {SEFM} 2022 Collocated Workshops
                  - AI4EA, F-IDE, CoSim-CPS, CIFMA, Berlin, Germany, September 26-30,
                  2022, Revised Selected Papers},
  series       = {Lecture Notes in Computer Science},
  volume       = {13765},
  pages        = {132--147},
  publisher    = {Springer},
  year         = {2022},
  url          = {https://doi.org/10.1007/978-3-031-26236-4\_11},
  doi          = {10.1007/978-3-031-26236-4\_11},
  timestamp    = {Sat, 25 Feb 2023 21:35:44 +0100},
  biburl       = {https://dblp.org/rec/conf/sefm/HoangSDFB22.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@misc{Hoang2023:SCXMLSemanticsModel,
    author={Thai Son Hoang and Colin Snook and Karla Morris and Michael Butler},
    title={{SCXML} Semantics Model in {Event-B}},
    note={\url{https://doi.org/10.5258/SOTON/D2791}},
    url={https://shorturl.at/agtHN},
    year = {2023}
}

@inproceedings{DBLP:conf/sefm/SnookBHFD22,
  author       = {Colin F. Snook and
                  Michael J. Butler and
                  Thai Son Hoang and
                  Asieh Salehi Fathabadi and
                  Dana Dghaym},
  editor       = {Paolo Masci and
                  Cinzia Bernardeschi and
                  Pierluigi Graziani and
                  Mario Koddenbrock and
                  Maurizio Palmieri},
  title        = {Developing the {UML-B} Modelling Tools},
  booktitle    = {Software Engineering and Formal Methods. {SEFM} 2022 Collocated Workshops
                  - AI4EA, F-IDE, CoSim-CPS, CIFMA, Berlin, Germany, September 26-30,
                  2022, Revised Selected Papers},
  series       = {Lecture Notes in Computer Science},
  volume       = {13765},
  pages        = {181--188},
  publisher    = {Springer},
  year         = {2022},
  url          = {https://doi.org/10.1007/978-3-031-26236-4\_16},
  doi          = {10.1007/978-3-031-26236-4\_16},
  timestamp    = {Sat, 25 Feb 2023 21:35:44 +0100},
  biburl       = {https://dblp.org/rec/conf/sefm/SnookBHFD22.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{Eshuis_2009,
	doi = {10.1016/j.scico.2008.09.001},
	url = {https://doi.org/10.1016%2Fj.scico.2008.09.001},
	year = 2009,
	month = jan,
	publisher = {Elsevier {BV}},
	volume = {74},
	number = {3},
	pages = {65--99},
	author = {Rik Eshuis},
	title = {Reconciling statechart semantics},
	journal = {Science of Computer Programming}
}

@INPROCEEDINGS{ICECCS2017-CamilleX,
  author={Hoang, Thai Son and Dghaym, Dana and Snook, Colin and Butler, Michael},
  booktitle={2017 22nd International Conference on Engineering of Complex Computer Systems (ICECCS)}, 
  title={A Composition Mechanism for Refinement-Based Methods}, 
  year={2017},
  volume={},
  number={},
  pages={100-109},
  doi={10.1109/ICECCS.2017.27}}

@article{10.1145/357474.355062,
author = {L\"{u}ttgen, Gerald and von der Beeck, Michael and Cleaveland, Rance},
title = {A Compositional Approach to Statecharts Semantics},
year = {2000},
issue_date = {Nov. 2000},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {25},
number = {6},
issn = {0163-5948},
url = {https://doi.org/10.1145/357474.355062},
doi = {10.1145/357474.355062},
abstract = {Statecharts is a visual language for specifying reactive system behavior. The formalism extends traditional finite-state machines with notions of hierarchy and concurrency, and it is used in many popular software design notations. A large part of the appeal of Statecharts derives from its basis in state machines, with their intuitive operational interpretation. The classical semantics of Statecharts, however, suffers from a serious defect; it is not compositional, meaning that the behavior of system descriptions cannot be inferred from the behavior of their subsystems. Compositionality is a prerequisite for exploiting the modular structure of Statecharts for simulation, verification, and code generation, and it also provides the necessary foundation for reusability.This paper suggests a new compositional approach to formalizing Statecharts semantics as flattened labeled transition systems in which transitions represent system steps. The approach builds on ideas developed for timed process calculi and employs structural operational rules to define the transitions of a Statecharts expression in terms of the transitions of its subexpressions. It is first presented for a simple dialect of Statecharts, with respect to a variant of Pnueli and Shalev's semantics, and is illustrated by means of a small example. To demonstrate its flexibility, the proposed approach is then extended to deal with practically useful features available in many Statecharts variants, namely state references, history states, and priority concepts along state hierarchies.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {nov},
pages = {120–129},
numpages = {10},
keywords = {compositionality, statecharts, operational semantics}
}

@inproceedings{10.1145/355045.355062,
author = {L\"{u}ttgen, Gerald and von der Beeck, Michael and Cleaveland, Rance},
title = {A Compositional Approach to Statecharts Semantics},
year = {2000},
isbn = {1581132050},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/355045.355062},
doi = {10.1145/355045.355062},
abstract = {Statecharts is a visual language for specifying reactive system behavior. The formalism extends traditional finite-state machines with notions of hierarchy and concurrency, and it is used in many popular software design notations. A large part of the appeal of Statecharts derives from its basis in state machines, with their intuitive operational interpretation. The classical semantics of Statecharts, however, suffers from a serious defect; it is not compositional, meaning that the behavior of system descriptions cannot be inferred from the behavior of their subsystems. Compositionality is a prerequisite for exploiting the modular structure of Statecharts for simulation, verification, and code generation, and it also provides the necessary foundation for reusability.This paper suggests a new compositional approach to formalizing Statecharts semantics as flattened labeled transition systems in which transitions represent system steps. The approach builds on ideas developed for timed process calculi and employs structural operational rules to define the transitions of a Statecharts expression in terms of the transitions of its subexpressions. It is first presented for a simple dialect of Statecharts, with respect to a variant of Pnueli and Shalev's semantics, and is illustrated by means of a small example. To demonstrate its flexibility, the proposed approach is then extended to deal with practically useful features available in many Statecharts variants, namely state references, history states, and priority concepts along state hierarchies.},
booktitle = {Proceedings of the 8th ACM SIGSOFT International Symposium on Foundations of Software Engineering: Twenty-First Century Applications},
pages = {120–129},
numpages = {10},
keywords = {statecharts, compositionality, operational semantics},
location = {San Diego, California, USA},
series = {SIGSOFT '00/FSE-8}
}

@Inbook{Barnett2017,
author="Barnett, Jim",
title="Introduction to SCXML",
bookTitle="Multimodal Interaction with W3C Standards: Toward Natural User Interfaces to Everything",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="81--107",
abstract="SCXML is a control flow language based on Harel State Charts. It offers powerful, application-independent control constructs, along with a plug-in capability that allows platforms to customize the language for specific domains. This paper offers an overview of the language along with examples of its use.",
isbn="978-3-319-42816-1",
doi="10.1007/978-3-319-42816-1_5",
url="https://doi.org/10.1007/978-3-319-42816-1_5"
}



