machine abs_scxml_statemachine

/*
 * This machine joins the scxml and statemachine models together.
 * This means that we synchronise the scxml step events with the statemachine transition events.
 * 
 */
  
includes abs_scxml
includes abs_statemachine

sees abs_scxml_statemachine_ctx c0_4_tree_prop
 
events
	event INITIALISATION
	synchronises INITIALISATION
	//synchronises INITIALISATION	// cannot synch since both events have the same name hence...
	then
		@update-active: abs_active ≔ abs_init					//copied from scxml_statemachine
		@update-active_leaf: abs_active_leaf ≔ abs_init_leaf	//copied from scxml_statemachine
	end

	event abs_raiseExternalTrigger
	synchronises abs_raiseExternalTrigger
	end
	
	event abs_dequeueExternalTrigger
	synchronises abs_dequeueExternalTrigger
	end
	
	event abs_dequeueInternalTrigger
	synchronises abs_dequeueInternalTrigger
	end
	
	// a triggered transition synchronises a transition with a triggered step
	event abs_triggeredTransition
	synchronises abs_triggeredStep
	synchronises abs_transition
	where 
		@tr_st:		abs_TransitionStep(abs_transition) = abs_Step 
	end
	
	// discarding a trigger executes a triggered step without a transition
	// no finalised transitions are active (TBD: we do not consider their other guards yet)
	event abs_discardTrigger
	synchronises abs_triggeredStep
	where
		@tr_st:		abs_Step ∉ ran(abs_TransitionStep)
		@finalisedFired: abs_source[abs_finalisedTransitions ∩ abs_TransitionStep∼[dom(abs_StepTrigger)] ] ∩ abs_active = ∅ // how to check only triggered ones?
	end
	
	// an untriggered transition synchronises a transition with an untriggered step
	event abs_untriggeredTransition
	synchronises abs_untriggeredStep
	synchronises abs_transition
	where 
		@tr_st:		abs_TransitionStep(abs_transition) = abs_Step 
	end

	// a future transition executes an untriggered step without a transition
	event abs_futureUntriggeredTransition
	synchronises abs_untriggeredStep
	where 
		@tr_st:		abs_Step ∉ ran(abs_TransitionStep) 
	end
	
	//for completion, no finalised transitions are active (TBD: we do not consider their other guards yet)
	event abs_completion
	synchronises abs_completion
	where
		@finalisedFired: abs_source[abs_finalisedTransitions ∖ abs_TransitionStep∼[dom(abs_StepTrigger)] ] ∩ abs_active = ∅		// how to check only untriggered ones?
	end

end