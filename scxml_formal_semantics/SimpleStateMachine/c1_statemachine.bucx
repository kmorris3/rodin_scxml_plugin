/*
 * This context declare the signature of a statemachine
 */
context c1_statemachine
extends c0_3_tree_def
sets
	TRANSITION // The set of all transitions
constants
	STATE_MACHINE // The "type" of State machines
	states // The set of states
	root // The root state
	container // The container relationship between states
	
	leaves // The set of leaf states
	transitions // The set of transitions
	source // The source of each transition
	target // The target of each transition

	init // The initial states
	init_leaf // The initial leaf
axioms
	// Definition of STATE_MACHINE using set comprehension
	@def-STATE_MACHINE: STATE_MACHINE = {
		S ↦ r ↦ c ↦ T ↦ s ↦ t ∣
		S ⊆ STATE ∧
		r ↦ c ∈ Tree(S) ∧
		T ⊆ TRANSITION ∧
		s ∈ T → S ∧
		t ∈ T → S
	}
	
	@statemachine: states ↦ root ↦ container ↦ transitions ↦ source ↦ target ∈ STATE_MACHINE
	
	// @states is a set of states
	theorem @typeof-states: states ⊆ STATE
	
	// @root and @container form a tree on @states
	theorem @tree_structure: root ↦ container ∈ Tree(states)
	
	// Derivable properties from definition of Tree
	theorem @typeof-root: root ∈ states
	theorem @typeof-container: container ∈ states ∖ {root} → states
	theorem @root-reachable: ∀ state · state ∈ states ∖ {root} ⇒ root ∈ cl(container)[{state}]
	
	// The set of leaf states are those in @states and
	// does not contain any other state.
	@def-leaves: leaves = states ∖ ran(container)
	theorem @leaves_are_states: leaves ⊆ states
  	// Copy for automatic proofs
  	theorem @thm12-range_preservation: ∀r· ran(r) = ran(cl(r))
	theorem @range-preservation: ran(container) = ran(cl(container))
	
	// Transitions are relation between leaf states
	theorem @typeof-transitions: transitions ⊆ TRANSITION
	theorem @typeof-source: source ∈ transitions → states // The source can be any state (non-deterministic)
	theorem @typeof-target: target ∈ transitions → states // The target can be any state (non-deterministic)
	
	// Parallel states:
	// transitions : POW(states) <-> POW(leaves) 
	
	@typeof-init: init ⊆ states
	@typeof-init_leaf: init_leaf ∈ leaves
	@init-closure: init = cl(container)[{init_leaf}] ∪ {init_leaf}
end