/*
 * This context defines notion of transformations, captured in terms of
 * "enabling" states, "exiting" states, "entering" states.
 */
context utstc_ctx2_transformation
extends utstc_ctx2 utstc_ctx1_region
axioms
	@enabling-type: enabling ∈ transformations → ℙ1(states)
	
    @exiting-type: exiting ∈ transformations → ℙ1(states)
    
    @exiting-either_one_or_all_in_a_region: 
    	∀trf, s, r ·
    		trf ∈ transformations ∧
    		s ∈ exiting(trf) ∧
    		r ∈ regions ∧ 
    		s ∈ r
    	⇒
    		exiting(trf) ∩ r = {s} ∨ r ⊆ exiting(trf) 
    
    
    // if the container state s of a region r is an exiting state, there must some exiting state in r.
    @exiting-contained_region:
    	∀trf, s, r ·
    		trf ∈ transformations ∧
    		s ∈ exiting(trf) ∧
    		r ∈ regions ∧
    		container[r] = {s}
    	⇒
    		exiting(trf) ∩ r ≠ ∅
    
    // if s is an enabling state in a region r then s is the unique exiting state in r.
    @enabling-unique_exiting_states_in_a_region:
    	∀trf, s, r · trf ∈ transformations ∧ 
    		s ∈ enabling(trf) ∧
    		r ∈ regions ∧
    		s ∈ r
    	⇒
    		exiting(trf) ∩ r = {s}
    		
      @exiting-unique_enabling_states_in_a_region:
    	∀trf, s, r · trf ∈ transformations ∧ 
    		r ∈ regions ∧
    		exiting(trf) ∩ r = {s} ∧  // Either deterministically exiting r or (nondeterministically exiting r and r has one state)
    		r ≠ {s}                   // r has more than one state (hence deterministically exiting
    	⇒
			enabling(trf) ∩ r = {s}  // s is the single enabling state in the region  			

    @entering-type: entering ∈ transformations → ℙ1(states)
    
    @entering-at_most_one_in_a_region: 
    	∀trf, s, r ·
    		trf ∈ transformations ∧
    		s ∈ entering(trf) ∧
    		r ∈ regions ∧ 
    		s ∈ r
    	⇒
    		entering(trf) ∩ r = {s} 

	// If a trf enters a container of a region r
	// the trf must enter some states in r
    @entering-contained_region:
    	∀trf, r ·
    		trf ∈ transformations ∧
    		r ∈ regions ∧
    		container[r] ⊆ entering(trf) 
    	⇒
    		entering(trf) ∩ r ≠ ∅

	/*
	 * For all transformation trf and a region r,
	 *   if trf is entering r but not the container of r
	 *   then the container of r is not an exiting state of trf 
	 */
	@entering-stay_within_state:
		∀trf, r, c ·
    		trf ∈ transformations ∧
			r ∈ regions ∧
			container[r] = {c} ∧
			entering(trf) ∩ r ≠ ∅ ∧
			entering(trf) ∩ container[r] = ∅
		⇒
			enabling(trf) ∩ cl(container)∼[{c}] ≠ ∅ ∧ c ∉ exiting(trf)

	 @entering-you_must_go_somewhere:
		∀trf, r ·
    		trf ∈ transformations ∧
			r ∈ regions ∧
			container[r] ∩ exiting(trf) = ∅ ∧
			exiting(trf) ∩ r ≠ ∅
		⇒
			entering(trf) ∩ r ≠ ∅  // You must go somewhere within r

	@enter-through-parent-or-within-region:
		∀trf, r ·
			trf ∈ transformations ∧
			r ∈ regions ∧
			entering(trf) ∩ r ≠ ∅ ∧
			exiting(trf) ∩ r = ∅
		⇒
			entering(trf) ∩ container[r] ≠ ∅

	@root-not-entering: ∀trf · trf ∈ transformations ⇒ root ∉ entering(trf)
    
end