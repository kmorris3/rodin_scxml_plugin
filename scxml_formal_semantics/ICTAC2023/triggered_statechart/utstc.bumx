/*
 * This machine captures the semantics of the statemachine as trace of active states.
 */
machine utstc
sees utstc_ctx utstc_c0_4_tree_prop
variables
	active // The set of active states
	
invariants
	// @active is a set of states
	@typeof-active: active ⊆ states
	
	// If a non-root state is active then its container is also active
	@container_active:
		∀ s · s ∈ active ∖ {root} ⇒ container(s) ∈ active
	
	// If a state is active then all of its ancestor is active
	theorem @ancestor_active:
		∀ s · s ∈ active ⇒ cl(container)[{s}] ⊆ active

	// If a container is active then there must be an active sub-state
	@content_active:
		∀ s · s ∈ ran(container) ∧ s ∈ active ⇒ container∼[{s}] ∩ active ≠ ∅
		
	// At most one active in the same region
	@active-region-unique: ∀r, s · r ∈ regions ∧ s ∈ r ∩ active ⇒ r ∩ active ⊆ {s}
	theorem @active-region: ∀r, s · r ∈ regions ∧ s ∈ r ∩ active ⇒ r ∩ active = {s}

	// All parallel regions are inactive (hence active) at the same time
	@active-region-parallel: ∀region1, region2 · region1 ∈ regions ∧ region2 ∈ regions ∧
		container[region1] = container[region2] ∧ region1 ∩ active = ∅ ⇒ region2 ∩ active = ∅
	
	// This is a consequence of @active-region-parallel
	theorem @active-region-parallel-equiv: ∀region1, region2 · region1 ∈ regions ∧ region2 ∈ regions ∧
		container[region1] = container[region2] ⇒ (region1 ∩ active = ∅ ⇔ region2 ∩ active = ∅)

	// If a container of a region is active then the region must be active
	// Use in transformation/active-region-parallel/INV
	theorem @region_active:
		∀ r · r ∈ regions ∧ container[r] ⊆ active ⇒ r ∩ active ≠ ∅
	
events
	event INITIALISATION
	then
		@update-active: active ≔ init_active
	end
	
	event transformation
	any
		trf // the set of transitions that will be executed in parallel, they could be empty
	where
		@typeof-trf: trf ∈ transformations
		@active-enabling: enabling(trf) ⊆ active
		// This theorem is intended to be use in proving
		// transformation/active-region-unique/INV
		theorem @active-no-exit-no-enter:
			∀s · s ∈ states ∖ {root} ∧ s ∈ active ∧ s ∉ exiting(trf) ⇒
				(∀r · r ∈ regions ∧ s ∈ r ⇒ r ∩ entering(trf) = ∅) 
	then
		@update-active: active ≔ (active ∖ exiting(trf)) ∪ entering(trf)
	end
end