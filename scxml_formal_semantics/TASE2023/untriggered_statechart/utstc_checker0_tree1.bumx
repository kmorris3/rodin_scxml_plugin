machine utstc_checker0_tree1
refines utstc_checker0_tree0
sees utstc_ctx0 utstc_c0_3_tree_def

variables
	finished	// Indication that the check has finish
	result		// The result of the check

	visited		// The set of visited states

invariants
	@typeof-visited: root ∈ visited
	@vitited: ∀n· n ∈ visited ∖ {root} ⇒ root ∈ cl(container)[{n}]
	theorem @DLF: finished = FALSE ⇒
		// Guard of simple check
		 (¬(finite(states) ∧ 
			root ∈ states ∧
			container ∈ states ∖ {root} → states ∧
			leaves = states ∖ ran(container)
			) ∧ finished = FALSE)
		∨ // Guard of progress
		 (finite(states) ∧
			root ∈ states ∧
			container ∈ states ∖ {root} → states ∧
			leaves = states ∖ ran(container)
			∧ container∼[visited] ∖ visited ≠ ∅
			∧ finished = FALSE)
		∨ // Guard of check_failed
		 (finite(states) ∧ 
			root ∈ states ∧
			container ∈ states ∖ {root} → states ∧
			leaves = states ∖ ran(container)
			∧ container∼[visited] ∖ visited = ∅
			∧ states ∖ visited ≠ ∅
			∧ finished = FALSE)
		∨ // Guard of check_success
		 (finite(states) ∧ 
			root ∈ states ∧
			container ∈ states ∖ {root} → states ∧
			leaves = states ∖ ran(container)
			∧ container∼[visited] ∖ visited = ∅
			∧ states ∖ visited = ∅
			∧ finished = FALSE)
variants
	@var: ({FALSE} ∖ {bool(finite(states))}) × (states ∖ visited) // This should be generated per convergent event.

events
	event INITIALISATION extends INITIALISATION
	begin
		@init-visited: visited ≔ {root}
	end

	convergent event finiteStates_CheckFailed
	refines checkFailed
	when
		@grd1: finished = FALSE
		@grd2: ¬ finite(states)
		// Copy the definition for automatic proof
//		theorem @def-Tree: Tree = {
//			Sts ↦ rt ↦ prn ↦ lvs ∣
//			Sts ⊆ STATE ∧
//			finite(Sts) ∧
//			rt ∈ Sts ∧
//			prn ∈ Sts ∖ {rt} → Sts ∧
//			(∀ n · n ∈ Sts ∖ {rt} ⇒ rt ∈ cl(prn)[{n}]) ∧
//			lvs = Sts ∖ ran(prn)
//		}
	then
		@act1: finished ≔ TRUE
		@act2: result ≔ FALSE
	end
		
	convergent event rootState_CheckFailed
	refines checkFailed
	when
		@grd1: finished = FALSE
		@grd2: root ∉ states
		// Copy the definition for automatic proof
//		theorem @def-Tree: Tree = {
//			Sts ↦ rt ↦ prn ↦ lvs ∣
//			Sts ⊆ STATE ∧
//			finite(Sts) ∧
//			rt ∈ Sts ∧
//			prn ∈ Sts ∖ {rt} → Sts ∧
//			(∀ n · n ∈ Sts ∖ {rt} ⇒ rt ∈ cl(prn)[{n}]) ∧
//			lvs = Sts ∖ ran(prn)
//		}
	then
		@act1: finished ≔ TRUE
		@act2: result ≔ FALSE
	end

	convergent event containerType_CheckFailed
	refines checkFailed
	when
		@grd1: finished = FALSE
		@grd2: container ∉ states ∖ {root} → states
		// Copy the definition for automatic proof
//		theorem @def-Tree: Tree = {
//			Sts ↦ rt ↦ prn ↦ lvs ∣
//			Sts ⊆ STATE ∧
//			finite(Sts) ∧
//			rt ∈ Sts ∧
//			prn ∈ Sts ∖ {rt} → Sts ∧
//			(∀ n · n ∈ Sts ∖ {rt} ⇒ rt ∈ cl(prn)[{n}]) ∧
//			lvs = Sts ∖ ran(prn)
//		}
	then
		@act1: finished ≔ TRUE
		@act2: result ≔ FALSE
	end

	convergent event leavseDefinition_CheckFailed
	refines checkFailed
	when
		@grd1: finished = FALSE
		@grd2: leaves ≠ states ∖ ran(container)
		// Copy the definition for automatic proof
//		theorem @def-Tree: Tree = {
//			Sts ↦ rt ↦ prn ↦ lvs ∣
//			Sts ⊆ STATE ∧
//			finite(Sts) ∧
//			rt ∈ Sts ∧
//			prn ∈ Sts ∖ {rt} → Sts ∧
//			(∀ n · n ∈ Sts ∖ {rt} ⇒ rt ∈ cl(prn)[{n}]) ∧
//			lvs = Sts ∖ ran(prn)
//		}
	then
		@act1: finished ≔ TRUE
		@act2: result ≔ FALSE
	end

	convergent event progress
	when
		@grd1: finite(states) ∧ // finite tree
			root ∈ states ∧
			container ∈ states ∖ {root} → states ∧
			leaves = states ∖ ran(container)
		@grd2: container∼[visited] ∖ visited ≠ ∅
		@grd3: finished = FALSE
	then
		@act1: visited ≔ visited ∪ container∼[visited]
	end
	
	convergent event reachabilityCheckFailed refines checkFailed
	when
		@grd1: finite(states) ∧ // finite tree
			root ∈ states ∧
			container ∈ states ∖ {root} → states ∧
			leaves = states ∖ ran(container)
		@grd2: container∼[visited] ∖ visited = ∅
		@grd3: states ∖ visited ≠ ∅
		@grd4: finished = FALSE
	then
		@act1: finished ≔ TRUE
		@act2: result ≔ FALSE
	end

	convergent event checkSuccessful refines checkSuccessful
	when
		@grd1: finite(states) ∧ // finite tree
			root ∈ states ∧
			container ∈ states ∖ {root} → states ∧
			leaves = states ∖ ran(container)
		@grd2: container∼[visited] ∖ visited = ∅
		@grd3: states ∖ visited = ∅
		@grd4: finished = FALSE
		// Copy the definition for automatic proof
//		theorem @def-Tree: Tree = {
//			Sts ↦ rt ↦ prn ↦ lvs ∣
//			Sts ⊆ STATE ∧
//			finite(Sts) ∧
//			rt ∈ Sts ∧
//			prn ∈ Sts ∖ {rt} → Sts ∧
//			(∀ n · n ∈ Sts ∖ {rt} ⇒ rt ∈ cl(prn)[{n}]) ∧
//			lvs = Sts ∖ ran(prn)
//		}
	then
		@act1: finished ≔ TRUE
		@act2: result ≔ TRUE
	end

end