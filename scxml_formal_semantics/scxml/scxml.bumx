machine scxml
sees scxml_ctx

variables
	internal_queue
	external_queue
	dequeue_trigger
	untriggered_completed

invariants
	@internal_queue: 			internal_queue ∈ ℙ(InternalTriggers)
	@external_queue: 			external_queue ∈ ℙ(ExternalTriggers)
	@dequeue_trigger: 			dequeue_trigger ∈ DeQueueType
	@dequeue_triggerwd: 			dequeue_trigger ⊆ InternalTriggers ∪ ExternalTriggers
	@untriggered_completed: 		untriggered_completed ∈ BOOL
	
	@firingTriggered: 			dequeue_trigger ≠ ∅ ⇒ untriggered_completed=FALSE		//just a sanity check
	theorem @readyToDequeue:		untriggered_completed=TRUE ⇒ dequeue_trigger = ∅		//just a sanity check
		
events

	event INITIALISATION
	then
		@internal_queue_init:			internal_queue ≔ ∅ 
		@external_queue_init: 			external_queue ≔ ∅
		@dequeue_trigger_init:			dequeue_trigger ≔ ∅
		@untriggered_completed_init: 	untriggered_completed ≔ FALSE
	end
	
	event raiseExternalTrigger
	any trigger where
		@trigger: 				trigger ∈ ExternalTriggers
	then
		@external_queue_set:		external_queue ≔ external_queue ∪ {trigger}
	end
	
	event dequeueExternal
	any trigger where 
		@untriggered_completed:		untriggered_completed = TRUE
		theorem @dequeue_trigger:	dequeue_trigger = ∅	//sanity check
		@trigger: 					trigger ∈ external_queue
		@internal_queue:				internal_queue = ∅
	then 
		@dequeue_trigger_set: 		dequeue_trigger ≔ {trigger}
		@external_queue_set:			external_queue ≔ external_queue ∖ {trigger}
		@untriggered_completed_set:	untriggered_completed ≔ FALSE
	end
	
	event dequeueInternal
	any trigger where 
		@untriggered_completed:		untriggered_completed = TRUE
		theorem @dequeue_trigger:	dequeue_trigger = ∅	//sanity check
		@trigger: 					trigger ∈ internal_queue
	then 
		@dequeue_trigger_set: 		dequeue_trigger ≔ {trigger}
		@external_queue_set:			internal_queue ≔ internal_queue ∖ {trigger} 
		@untriggered_completed_set:	untriggered_completed ≔ FALSE
	end
	
	event triggeredTransition 
	any trigger raised_triggers
	where 
		@trigger: 						trigger ∈ dequeue_trigger
		theorem @untriggered_completed:	untriggered_completed = FALSE	//sanity check
		@raised_triggers:				raised_triggers ⊆ InternalTriggers
	then 
		@dequeue_trigger_set: 			dequeue_trigger ≔ ∅
		@internal_queue_set:				internal_queue ≔ internal_queue ∪ raised_triggers		//raised triggers
	end
	
	event completeTriggered
	any trigger where 
		@trigger: 						trigger ∈ dequeue_trigger
		theorem @untriggered_completed:	untriggered_completed = FALSE	//sanity check			 
	then 
		@dequeue_trigger_set: 			dequeue_trigger ≔ dequeue_trigger ∖ {trigger}
	end
	
	event untriggeredTransition
	any raised_triggers
	where 
		@dequeue_trigger: 		dequeue_trigger = ∅
		@untriggered_completed:	untriggered_completed = FALSE		
		@new_raised_trigger:		raised_triggers ⊆ InternalTriggers
	then 
		@internal_queue_set:		internal_queue ≔ internal_queue ∪ raised_triggers		//raised triggers
	end
	
	event completeUntriggered
	where
		@dequeue_trigger: 			dequeue_trigger = ∅
		@untriggered_completed:		untriggered_completed = FALSE
	then
		@untriggered_completed_set:	untriggered_completed ≔ TRUE
	end
	
//	event futureDequeue	//needed to allow for future triggers starting a run
//	where 
//		@dequeue_trigger: 		dequeue_trigger = ∅
//		@untriggered_completed:			untriggered_completed = TRUE		
//	then 
//		@internal_queue_set:		untriggered_completed ≔ FALSE	
//	end
	
	event futureTransition	//needed if we allow adding raising of abstract internal triggers in later refinements
	any raised_triggers
	where 
		@raised_triggers:		raised_triggers ⊆ InternalTriggers
		@untriggered_completed:	untriggered_completed = TRUE		
	then 
		@internal_queue_set:		internal_queue ≔ internal_queue ∪ raised_triggers		//raised triggers
	end
	
end

