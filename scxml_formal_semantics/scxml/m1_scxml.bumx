machine m1_scxml
refines m0_scxml
includes cnc_scxml
sees gluing_scxml_ctx
variables
	last_dequeue_trigger
invariants
	@last_dequeue_trigger: 		last_dequeue_trigger ∈ DeQueueType ∪ { {nullTrigger} }
	//we only add new triggers to the internal queue
	@internal_queue_glue: 		abs_internal_queue = cnc_internal_queue ∩ abs_Triggers	
	//we only add new triggers to the external queue	
	@external_queue_glue: 		abs_external_queue = cnc_external_queue ∩ abs_Triggers 
	//if the contents of the dequeued trigger is an old trigger, it is the same as the abstract dequeued trigger 
	@cnc_dequeue_trigger_glue: 	cnc_dequeue_trigger ⊆ abs_Triggers ⇒ cnc_dequeue_trigger = abs_dequeue_trigger
	//if the contents of the dequeued trigger is a new trigger, the abstract dequeued trigger is empty 
	@cnc_dequeue_trigger_glue2:	cnc_dequeue_trigger ⊈ abs_Triggers ⇒ abs_dequeue_trigger = ∅

 	// Due to transition guard strengthening, completion may occur earlier in refinements so is weaker
 	// 	(abs_completed=TRUE ⇒ cnc_completed=TRUE). 
 	// However, since this is the wrong way round for refinement, we allow for early completion in the
 	// abstraction by adding non-deterministic completions. Hence cnc_completed=abs_completed. 
	// We also need non-deterministic future deQueue events to allow for the introdabs_completedtion of new events that 
	// set cnc_completed=FALSE
 	//@cnc_completed_glue: cnc_completed = abs_completed	//Doesn't prove INV - new dequeue events set cnc_completed to FALSE
 	//Also tried:
	@uuu: 						cnc_completed = FALSE ⇔ last_dequeue_trigger ≠∅
	@vvv: 						cnc_dequeue_trigger ≠∅ ⇒ cnc_dequeue_trigger = last_dequeue_trigger
  	@www: 						last_dequeue_trigger=∅ ⇒ abs_completed=TRUE	
  	@xxx: 						last_dequeue_trigger ⊈ (abs_Triggers ∪ {nullTrigger}) ⇒ abs_completed = TRUE
  	@yyy: 						last_dequeue_trigger ⊆ abs_Triggers ∧ last_dequeue_trigger≠∅ ⇒ cnc_completed=abs_completed
 	//@cnc_completed_glue:  cnc_completed=TRUE ⇒ abs_completed=TRUE  // Doesn't prove GRD - untriggered transitions and completion are guarded by abs_completed=FALSE
 	@zzz: last_dequeue_trigger={nullTrigger} ⇒ abs_completed = FALSE

events

	event INITIALISATION
	synchronises INITIALISATION
	begin
		@aux_init: last_dequeue_trigger ≔ {nullTrigger}
	end
	
	event old_raiseExternalTrigger refines abs_raiseExternalTrigger
	synchronises cnc_raiseExternalTrigger
	where
		@abs_trigger:	cnc_trigger ∈ abs_Triggers
	with
		@abs_trigger:	abs_trigger = cnc_trigger
	end
	
	event new_raiseExternalTrigger
	synchronises cnc_raiseExternalTrigger
	where
		@not_abs_trigger:	cnc_trigger ∉ abs_Triggers
	end

	event old_dequeueExternalTrigger refines abs_dequeueExternalTrigger
	synchronises cnc_dequeueExternalTrigger
	where
		@abs_trigger:				cnc_trigger ∈ abs_Triggers
	then
		@last_dequeue_trigger_set: 	last_dequeue_trigger ≔ {cnc_trigger}
	with
		@abs_trigger:				abs_trigger = cnc_trigger
	end
	
	event new_dequeueExternalTrigger
	synchronises cnc_dequeueExternalTrigger
	where
		@not_abs_trigger:			cnc_trigger ∉ abs_Triggers
	then
		@last_dequeue_trigger_set: 	last_dequeue_trigger ≔ {cnc_trigger}
	end

	event old_dequeueInternalTrigger refines abs_dequeueInternalTrigger
	synchronises cnc_dequeueInternalTrigger
	where
		@abs_trigger:				cnc_trigger ∈ abs_Triggers
	then
		@last_dequeue_trigger_set: 	last_dequeue_trigger ≔ {cnc_trigger}
	with
		@abs_trigger:				abs_trigger = cnc_trigger
	end
	
	event new_dequeueInternalTrigger
	synchronises cnc_dequeueInternalTrigger
	where
		@not_abs_trigger:			cnc_trigger ∉ abs_Triggers
	then
		@last_dequeue_trigger_set:	last_dequeue_trigger ≔ {cnc_trigger}
	end

	event old_triggeredStep refines abs_triggeredStep
	synchronises cnc_triggeredStep
	where
		@abs_trigger:			cnc_trigger ∈ abs_Triggers
	with
		@abs_trigger: 			abs_trigger = cnc_trigger
		@abs_raised_triggers:	abs_raised_triggers = cnc_raised_triggers ∩ abs_Triggers
	end
	
	event new_triggeredStep refines abs_futureStep
	synchronises cnc_triggeredStep
	where
		@not_abs_trigger:		cnc_trigger ∉ abs_Triggers
	with
		@abs_raised_triggers:	abs_raised_triggers = cnc_raised_triggers ∩ abs_Triggers
	end

	event old_discardTrigger refines abs_discardTrigger
	synchronises cnc_discardTrigger
	where
		@abs_trigger:	cnc_trigger ∈ abs_Triggers
	with
		@abs_trigger: 	abs_trigger = cnc_trigger
	end
	
	event new_discardTrigger
	synchronises cnc_discardTrigger
	where
		@not_abs_trigger:	cnc_trigger ∉ abs_Triggers
	end

	event old_untriggeredStep refines abs_untriggeredStep
	synchronises cnc_untriggeredStep
	where
		@last_dequeue_trigger:	last_dequeue_trigger ⊆ abs_Triggers ∪ {nullTrigger}
	with
		@abs_raised_triggers:	abs_raised_triggers = cnc_raised_triggers ∩ abs_Triggers
	end
	
	event new_untriggeredStep refines abs_futureStep
	synchronises cnc_untriggeredStep
	where
		@last_dequeue_trigger: 	last_dequeue_trigger ⊈ abs_Triggers ∪ {nullTrigger}
	with
		@abs_raised_triggers:	abs_raised_triggers = cnc_raised_triggers ∩ abs_Triggers
	end

	event old_completion refines abs_completion
	synchronises cnc_completion
	where
		@last_dequeue_trigger: 		last_dequeue_trigger ⊆ abs_Triggers ∪ {nullTrigger}
	then
		@last_dequeue_trigger_set: 	last_dequeue_trigger ≔ ∅
	end
	
	event new_completion
	synchronises cnc_completion
	where
		@last_dequeue_trigger: 		last_dequeue_trigger ⊈ abs_Triggers ∪ {nullTrigger}
	then
		@last_dequeue_trigger_set: 	last_dequeue_trigger ≔ ∅
	end
	
	event cnc_futureStep	//needed if we allow adding raising of abstract internal triggers in later refinements
	refines abs_futureStep
	synchronises cnc_futureStep
	with
		@abs_raised_triggers:	abs_raised_triggers = cnc_raised_triggers ∩ abs_Triggers
	end
	
end

