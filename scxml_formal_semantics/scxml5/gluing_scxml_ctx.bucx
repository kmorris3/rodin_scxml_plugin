context gluing_scxml_ctx
extends
	abs_scxml_ctx
	cnc_scxml_ctx
constants
	step_link		// gives the abstract step corresponding to a refined concrete step
	//trigger_link 	// gives the abstract trigger corresponding to a refined concrete trigger
axioms
	/**
	 * concrete to abstract steps is a partial surjective function.
	 * - All abstract steps must be refined (by one or more concrete steps)
	 * - Each concrete step has at most one abstract step
	 * - There can be new concrete steps (those that do not correspond to any abstract step)
	 */
	@linking-steps:		step_link ∈ cnc_Steps ⤀ abs_Steps	
	//concrete to abstract triggers is a bijection (we keep all abstract triggers)
	//@linking-triggers:	trigger_link ∈ cnc_Triggers ⤖ abs_Triggers
	//internal and external triggers do not change camp
	
	// If cnc_Step corresponds to an abstract triggered step then it has to be a concrete triggered step by the same trigger.
	@linking_Triggers1: ∀cnc_Step · cnc_Step ∈ dom(step_link) ∧ step_link(cnc_Step) ∈ dom(abs_StepTrigger)
		⇒ cnc_Step ∈ dom(cnc_StepTrigger) ∧ abs_StepTrigger(step_link(cnc_Step)) = cnc_StepTrigger(cnc_Step)
	
	// If cnc_Step corresponds to an abstract untriggered step then it can either be untriggered or it is triggered by a new concrete trigger.
	@linking_Triggers2: ∀cnc_Step · cnc_Step ∈ dom(step_link) ∧ step_link(cnc_Step) ∉ dom(abs_StepTrigger)
		∧ cnc_Step ∈ dom(cnc_StepTrigger) ⇒ cnc_StepTrigger(cnc_Step) ∉ abs_Triggers

	// If cnc_Step is a new step then it can either be untriggered or it is triggered by a new concrete trigger.
	@linking_Triggers3: ∀cnc_Step· cnc_Step ∈ cnc_Steps ∖ dom(step_link)
		∧ cnc_Step ∈ dom(cnc_StepTrigger) ⇒ cnc_StepTrigger(cnc_Step) ∉ abs_Triggers

//	@linking_externalTriggers: trigger_link[cnc_ExternalTriggers] ⊆ abs_ExternalTriggers

//	@refine_stepTrigger: ∀s,t·s↦t∈abs_StepTrigger ⇒ (step_link∼(s) ↦ trigger_link∼(t)) ∈ cnc_StepTrigger 
	
	//new steps cannot raise old triggers
	@r_stepraised1:		∀cnc_Step· cnc_Step ∈ cnc_Steps ∖ dom(step_link) ⇒ Seq_content(cnc_StepRaised(cnc_Step)) ∩ abs_Triggers = ∅ 

	theorem @r_stepraised1_thm:		∀cnc_Step· cnc_Step ∈ cnc_Steps ∖ dom(step_link) ⇒ Seq_content(cnc_StepRaised(cnc_Step)) ∩ abs_InternalTriggers = ∅ 
	
	//refined steps can only add new triggers into the old sequence
	// These might be subsume by the subsequent theorem
	@r_stepraised2:		∀cnc_Step· cnc_Step ∈ dom(step_link) ⇒
				abs_StepRaised(step_link(cnc_Step)) = Seq_keep( cnc_StepRaised(cnc_Step) ↦ abs_Triggers) 

	@r_stepraised2_thm:		∀cnc_Step· cnc_Step ∈ dom(step_link) ⇒
				abs_StepRaised(step_link(cnc_Step)) = Seq_keep( cnc_StepRaised(cnc_Step) ↦ abs_InternalTriggers) 
end