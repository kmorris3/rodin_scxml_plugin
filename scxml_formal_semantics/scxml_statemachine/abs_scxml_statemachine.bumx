machine abs_scxml_statemachine

/*
 * This machine joins the scxml and statemachine models together
 * 
 * This means that we synchronise the scxml step events with the staatemachine transition events.
 * 
 * 
 */
  
includes abs_scxml 
includes abs_statemachine

sees abs_scxml_statemachine_ctx c0_4_tree_prop
 
events
	event INITIALISATION
	synchronises INITIALISATION
	//synchronises INITIALISATION
	then
		@update-active: abs_active ≔ abs_init					//copied from scxml_statemachine
		@update-active_leaf: abs_active_leaf ≔ abs_init_leaf	//copied from scxml_statemachine
	end

	event abs_raiseExternalTrigger
	synchronises abs_raiseExternalTrigger
	end
	
	event abs_dequeueExternalTrigger
	synchronises abs_dequeueExternalTrigger
	end
	
	event abs_dequeueInternalTrigger
	synchronises abs_dequeueInternalTrigger
	end
	
	event abs_triggeredTransition
	synchronises abs_triggeredStep
	synchronises abs_transition
	where 
		@is_triggered:	abs_transition ∈ dom(abs_triggeredTransitions)
		@this_trigger:		abs_triggeredTransitions(abs_transition) = abs_trigger 
	end
	
	event abs_discardTrigger
	synchronises abs_discardTrigger
	where
		@finalisedFired: abs_source[abs_finalisedTransitions] ∩ abs_active = ∅
	end
	
	event abs_untriggeredStep
	synchronises abs_untriggeredStep
	synchronises abs_transition
	where 
		@not_triggered: 	abs_transition ∉ dom(abs_triggeredTransitions)
	end
	
	event abs_completion
	synchronises abs_completion
	where
		@finalisedFired: abs_source[abs_finalisedTransitions] ∩ abs_active = ∅
	end
	
//	event futureDequeue	//needed to allow for future triggers starting a run
//	synchronises futureDequeue	
//	end
	
	event abs_futureStep	//needed if we allow adding raising of abstract internal triggers in later refinements
	synchronises abs_futureStep
	end

end