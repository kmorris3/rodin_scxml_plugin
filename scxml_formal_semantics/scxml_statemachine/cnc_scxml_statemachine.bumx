machine cnc_scxml_statemachine

/*
 * This machine provides a renamed concrete version of a joined scxml and statemachine model.
 * 
 * Idealing this would just rename an instantiation of the already joined scxml_statemachine.
 * However, since there are some issues with renamed inclusion, for now we take an alternative 
 * route of re-joining the already renamed scxml and statemachine models
 * 
 * 
 */

includes cnc_scxml 
includes cnc_statemachine

sees cnc_scxml_statemachine_ctx c0_4_tree_prop
 
events
	event INITIALISATION
	synchronises INITIALISATION
	//synchronises INITIALISATION
	then
		@update-active: cnc_active ≔ cnc_init					//copied from scxml_statemachine
		@update-active_leaf: cnc_active_leaf ≔ cnc_init_leaf	//copied from scxml_statemachine
	end

	event cnc_raiseExternalTrigger
	synchronises cnc_raiseExternalTrigger
	end
	
	event cnc_dequeueExternalTrigger
	synchronises cnc_dequeueExternalTrigger
	end
	
	event cnc_dequeueInternalTrigger
	synchronises cnc_dequeueInternalTrigger
	end
	
	event cnc_triggeredTransition
	synchronises cnc_triggeredStep
	synchronises cnc_transition
	where
		@is_triggered:	cnc_transition ∈ dom(cnc_triggeredTransitions)
		@this_trigger:		cnc_triggeredTransitions(cnc_transition) = cnc_trigger 
	end 
	
	event cnc_discardTrigger
	synchronises cnc_discardTrigger
	where
		@finalisedFired: cnc_source[cnc_finalisedTransitions] ∩ cnc_active = ∅
	end
	
	event cnc_untriggeredTransition
	synchronises cnc_untriggeredStep
	synchronises cnc_transition
	where 
		@not_triggered: 	cnc_transition ∉ dom(cnc_triggeredTransitions)
	end
	
	event cnc_completion
	synchronises cnc_completion
	where
		@finalisedFired: cnc_source[cnc_finalisedTransitions] ∩ cnc_active = ∅
	end
	
	event cnc_futureStep	//needed if we allow adding raising of abstract internal triggers in later refinements
	synchronises cnc_futureStep
	end

end